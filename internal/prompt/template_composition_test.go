package prompt

import (
	"os"
	"path/filepath"
	"testing"
)

func TestTemplateInheritanceInPrompts(t *testing.T) {
	// Create temporary test files
	tempDir := t.TempDir()

	// Create a base template file
	baseTemplatePath := filepath.Join(tempDir, "base_template.md")
	baseContent := `---
name: Base Template
description: Base template with placeholders
version: 1.0
---

# Base Template

## Introduction
{{block "introduction" .}}
Default introduction content.
{{end}}

## Main Content
{{block "content" .}}
Default main content.
{{end}}

## Conclusion
{{block "conclusion" .}}
Default conclusion.
{{end}}`

	err := os.WriteFile(baseTemplatePath, []byte(baseContent), 0644)
	if err != nil {
		t.Fatalf("Failed to create base template file: %v", err)
	}

	// Create a derived template that extends the base
	derivedTemplatePath := filepath.Join(tempDir, "derived_template.md")
	derivedContent := `---
name: Derived Template
description: Template that extends the base
version: 1.0
extends: base_template
---
{{extends "` + baseTemplatePath + `"}}

{{block "introduction" .}}
This is a custom introduction that overrides the base template.
{{if hasVar .Variables "projectName"}}
Project: {{.Variables.projectName}}
{{end}}
{{end}}

{{block "content" .}}
This is the main content of the derived template.
{{if hasVar .Variables "details"}}
Details: {{.Variables.details}}
{{end}}
{{end}}`

	err = os.WriteFile(derivedTemplatePath, []byte(derivedContent), 0644)
	if err != nil {
		t.Fatalf("Failed to create derived template file: %v", err)
	}

	// Process the derived template
	content, err := os.ReadFile(derivedTemplatePath)
	if err != nil {
		t.Fatalf("Failed to read derived template: %v", err)
	}

	// Extract metadata and content
	metadata, _, err := ExtractMetadata(string(content), derivedTemplatePath)
	if err != nil {
		t.Fatalf("ExtractMetadata failed: %v", err)
	}

	// Verify the metadata
	if metadata.Name != "Derived Template" {
		t.Errorf("Expected template name 'Derived Template', got '%s'", metadata.Name)
	}

	// Verify the extends attribute in metadata
	if metadata.Extends != "base_template" {
		t.Errorf("Expected extends attribute 'base_template', got '%s'", metadata.Extends)
	}

	// Apply variables to the template
	variables := map[string]string{
		"projectName": "Test Project",
		"details":     "Detailed information for the test",
	}

	// Process template with inheritance directives
	_, processed, err := testInheritanceHelper(derivedTemplatePath, string(content), variables)
	if err != nil {
		t.Fatalf("ProcessPromptWithInheritance failed: %v", err)
	}

	// Check that the processed content contains overrides from the derived template
	if !contains(processed, "This is a custom introduction") {
		t.Error("Custom introduction override not found in processed content")
	}

	if !contains(processed, "Project: Test Project") {
		t.Error("Variable replacement not found in processed content")
	}

	if !contains(processed, "This is the main content of the derived template") {
		t.Error("Custom content override not found in processed content")
	}

	if !contains(processed, "Details: Detailed information for the test") {
		t.Error("Variable replacement in content block not found")
	}

	// Check that the base template's default conclusion was used (not overridden)
	if !contains(processed, "Default conclusion") {
		t.Error("Default conclusion from base template not found")
	}
}

func TestPromptComposition(t *testing.T) {
	// Create temporary test files
	tempDir := t.TempDir()

	// Create component files
	headerPath := filepath.Join(tempDir, "header.md")
	headerContent := `---
name: Header Component
description: Reusable header component
---
# {{if hasVar .Variables "title"}}{{.Variables.title}}{{else}}Default Title{{end}}
Date: {{if hasVar .Variables "date"}}{{.Variables.date}}{{else}}Current Date{{end}}
`

	err := os.WriteFile(headerPath, []byte(headerContent), 0644)
	if err != nil {
		t.Fatalf("Failed to create header component: %v", err)
	}

	footerPath := filepath.Join(tempDir, "footer.md")
	footerContent := `---
name: Footer Component
description: Reusable footer component
---
---
Generated by: {{if hasVar .Variables "generator"}}{{.Variables.generator}}{{else}}System{{end}}
Version: {{if hasVar .Variables "version"}}{{.Variables.version}}{{else}}1.0{{end}}
`

	err = os.WriteFile(footerPath, []byte(footerContent), 0644)
	if err != nil {
		t.Fatalf("Failed to create footer component: %v", err)
	}

	// Create a template that uses components through inclusion
	composedTemplatePath := filepath.Join(tempDir, "composed_template.md")
	composedContent := `---
name: Composed Template
description: Template using component inclusion
---
{{include "` + headerPath + `"}}

## Main Content
This is the main content of the composed template.
{{if hasVar .Variables "body"}}
{{.Variables.body}}
{{end}}

{{include "` + footerPath + `"}}
`

	err = os.WriteFile(composedTemplatePath, []byte(composedContent), 0644)
	if err != nil {
		t.Fatalf("Failed to create composed template: %v", err)
	}

	// Load and process the composed template
	templateContent, err := os.ReadFile(composedTemplatePath)
	if err != nil {
		t.Fatalf("Failed to read composed template: %v", err)
	}

	// Extract metadata
	_, extractedContent, err := ExtractMetadata(string(templateContent), composedTemplatePath)
	if err != nil {
		t.Fatalf("ExtractMetadata failed: %v", err)
	}

	// Process includes
	processedWithIncludes, err := ProcessIncludes(extractedContent)
	if err != nil {
		t.Fatalf("ProcessIncludes failed: %v", err)
	}

	// Apply variables
	variables := map[string]string{
		"title":     "Composed Document",
		"date":      "2025-05-13",
		"body":      "This is the variable content inserted in the body.",
		"generator": "CronAI Test",
		"version":   "2.0",
	}

	// Process the template with variables
	finalContent := ApplyVariables(processedWithIncludes, variables)

	// Verify that included components and variables were properly processed
	if !contains(finalContent, "# Composed Document") {
		t.Error("Header component title not properly included or variables not applied")
	}

	if !contains(finalContent, "Date: 2025-05-13") {
		t.Error("Header component date not properly included or variables not applied")
	}

	if !contains(finalContent, "This is the variable content inserted in the body") {
		t.Error("Body variable not properly applied")
	}

	if !contains(finalContent, "Generated by: CronAI Test") {
		t.Error("Footer component generator not properly included or variables not applied")
	}

	if !contains(finalContent, "Version: 2.0") {
		t.Error("Footer component version not properly included or variables not applied")
	}
}

// Helper to check if a string contains a substring
func contains(s, substr string) bool {
	for i := 0; i <= len(s)-len(substr); i++ {
		if s[i:i+len(substr)] == substr {
			return true
		}
	}
	return false
}

// testInheritanceHelper is a wrapper for ProcessPromptWithInheritance for testing purposes
func testInheritanceHelper(path, content string, variables map[string]string) (map[string]string, string, error) {
	// Use the actual implementation if it is already loaded, otherwise use a simplified version for testing
	_, extractedContent, err := ExtractMetadata(content, path)
	if err != nil {
		return variables, "", err
	}

	processed, err := ProcessIncludes(extractedContent)
	if err != nil {
		return variables, "", err
	}

	return variables, ApplyVariables(processed, variables), nil
}
