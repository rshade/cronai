// Package processor provides response processing functionality for CronAI.
package processor

import (
	"fmt"
	"strings"

	"github.com/rshade/cronai/internal/processor/template"
)

// FormatGitHubMessage formats a message for GitHub (issue, PR, comment) with a consistent structure
// This avoids duplication of formatting logic across different GitHub operations
func FormatGitHubMessage(messageType string, data template.Data) string {
	var bodyBuilder strings.Builder

	switch messageType {
	case "comment":
		// Header
		bodyBuilder.WriteString("## AI Response\n\n")
		bodyBuilder.WriteString(fmt.Sprintf("**Model**: %s\n", data.Model))
		bodyBuilder.WriteString(fmt.Sprintf("**Timestamp**: %s\n", data.Timestamp.Format("Jan 02, 2006 15:04:05")))
		bodyBuilder.WriteString(fmt.Sprintf("**Prompt**: %s\n\n", data.PromptName))

		// Content (without header)
		bodyBuilder.WriteString(data.Content)
		bodyBuilder.WriteString("\n\n")

	case "issue", "pr":
		// Header
		bodyBuilder.WriteString("## Generated by CronAI\n\n")
		bodyBuilder.WriteString(fmt.Sprintf("**Model**: %s\n", data.Model))
		bodyBuilder.WriteString(fmt.Sprintf("**Timestamp**: %s\n", data.Timestamp.Format("Jan 02, 2006 15:04:05")))
		bodyBuilder.WriteString(fmt.Sprintf("**Execution ID**: %s\n\n", data.ExecutionID))

		// Variables section if present
		if len(data.Variables) > 0 {
			bodyBuilder.WriteString("### Variables\n")
			for k, v := range data.Variables {
				bodyBuilder.WriteString(fmt.Sprintf("- %s: %s\n", k, v))
			}
			bodyBuilder.WriteString("\n")
		}

		// Content with header
		bodyBuilder.WriteString("### Content\n\n")
		bodyBuilder.WriteString(data.Content)
		bodyBuilder.WriteString("\n\n")
	}

	// Footer (common to all message types)
	bodyBuilder.WriteString("---\n")
	bodyBuilder.WriteString(fmt.Sprintf("_Generated by CronAI using %s model_", data.Model))

	return bodyBuilder.String()
}
