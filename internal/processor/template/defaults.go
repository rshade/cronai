package template

import "fmt"

// registerOrPanic registers a template and panics if there is an error
func registerOrPanic(m *Manager, name, content string) {
	if err := m.RegisterTemplateWithIncludes(name, content); err != nil {
		panic(fmt.Sprintf("Failed to register default template %s: %v", name, err))
	}
}

// registerDefaultTemplates adds built-in templates
func (m *Manager) registerDefaultTemplates() {
	// Default generic template
	registerOrPanic(m, "default", "Response from {{.Model}} - {{.PromptName}}\n{{.Content}}")

	// Email templates
	registerOrPanic(m, "default_email_subject", "Response from {{.Model}} - {{.PromptName}}")
	registerOrPanic(m, "default_email_html", `
<html>
<body>
<h1>AI Response: {{.PromptName}}</h1>
<p><strong>Model:</strong> {{.Model}}</p>
<p><strong>Time:</strong> {{.Timestamp.Format "Jan 02, 2006 15:04:05"}}</p>
<p><strong>Execution ID:</strong> {{.ExecutionID}}</p>
{{if .Variables}}
<p><strong>Variables:</strong></p>
<ul>
  {{range $key, $value := .Variables}}
  <li>{{$key}}: {{$value}}</li>
  {{end}}
</ul>
{{end}}
<div style="border: 1px solid #ccc; padding: 10px; margin-top: 15px;">
{{.Content}}
</div>
<hr>
<p style="font-size: small; color: #666;">Generated by CronAI using {{.Model}} model</p>
</body>
</html>
`)
	registerOrPanic(m, "default_email_text", `
AI Response: {{.PromptName}}
Model: {{.Model}}
Time: {{.Timestamp.Format "Jan 02, 2006 15:04:05"}}
Execution ID: {{.ExecutionID}}
{{if .Variables}}
Variables:
{{range $key, $value := .Variables}}
- {{$key}}: {{$value}}
{{end}}
{{end}}

{{.Content}}

--
Generated by CronAI using {{.Model}} model
`)

	// Slack templates
	slackTemplate := `{"blocks":[{"type":"section","text":{"type":"mrkdwn","text":"*{{.PromptName}}*\n\n{{.Content}}"}}]}`
	registerOrPanic(m, "default_slack", slackTemplate)

	// Monitoring-specific slack template
	monitoringSlackTemplate := `{"blocks":[{"type":"section","text":{"type":"mrkdwn","text":"*ALERT: {{.PromptName}}*\n\n{{.Content}}"}}]}`
	registerOrPanic(m, "default_slack_monitoring", monitoringSlackTemplate)

	// Webhook templates
	webhookTemplate := `{"model":"{{.Model}}","prompt":"{{.PromptName}}","content":"{{.Content}}"}`
	registerOrPanic(m, "default_webhook", webhookTemplate)

	// Monitoring-specific webhook template
	monitoringWebhookTemplate := `{"type":"monitoring","model":"{{.Model}}","prompt":"{{.PromptName}}","content":"{{.Content}}"}`
	registerOrPanic(m, "default_webhook_monitoring", monitoringWebhookTemplate)

	// Teams webhook templates
	teamsTemplate := `{
	"@type": "MessageCard",
	"@context": "https://schema.org/extensions",
	"themeColor": "0076D7",
	"summary": "AI Response: {{.PromptName}}",
	"sections": [{
		"activityTitle": "{{.PromptName}}",
		"activitySubtitle": "Generated by CronAI",
		"facts": [
			{
				"name": "Model",
				"value": "{{.Model}}"
			},
			{
				"name": "Time",
				"value": "{{.Timestamp.Format "Jan 02, 2006 15:04:05"}}"
			},
			{
				"name": "Execution ID",
				"value": "{{.ExecutionID}}"
			}{{if .Variables}}{{range $key, $value := .Variables}},
			{
				"name": "{{$key}}",
				"value": "{{$value}}"
			}{{end}}{{end}}
		],
		"markdown": true,
		"text": "{{.Content}}"
	}]
}`
	registerOrPanic(m, "default_webhook_teams", teamsTemplate)

	// Teams monitoring webhook template
	teamsMonitoringTemplate := `{
	"@type": "MessageCard",
	"@context": "https://schema.org/extensions",
	"themeColor": "FF0000",
	"summary": "ALERT: {{.PromptName}}",
	"sections": [{
		"activityTitle": "⚠️ ALERT: {{.PromptName}}",
		"activitySubtitle": "Generated by CronAI",
		"facts": [
			{
				"name": "Model",
				"value": "{{.Model}}"
			},
			{
				"name": "Time",
				"value": "{{.Timestamp.Format "Jan 02, 2006 15:04:05"}}"
			},
			{
				"name": "Execution ID",
				"value": "{{.ExecutionID}}"
			}
		],
		"markdown": true,
		"text": "{{.Content}}"
	}]
}`
	registerOrPanic(m, "default_webhook_teams_monitoring", teamsMonitoringTemplate)

	// File templates
	fileContentTemplate := `# AI Response: {{.PromptName}}
Model: {{.Model}}
Time: {{.Timestamp.Format "2006-01-02 15:04:05"}}
Execution ID: {{.ExecutionID}}

{{if .Variables}}
## Variables:
{{range $key, $value := .Variables}}
- {{$key}}: {{$value}}
{{end}}
{{end}}

## Content:
{{.Content}}

---
Generated by CronAI on {{.Timestamp.Format "2006-01-02 15:04:05"}}
`
	registerOrPanic(m, "default_file_content", fileContentTemplate)

	filenameTemplate := `logs/{{.Model}}-{{.PromptName}}-{{.Timestamp.Format "20060102-150405"}}.txt`
	registerOrPanic(m, "default_file_filename", filenameTemplate)

	// GitHub templates - use the wrapper functions to properly escape JSON values
	registerOrPanic(m, "default_github_issue", "{{GitHubIssueTemplate .}}")
	registerOrPanic(m, "default_github_comment", "{{GitHubCommentTemplate .}}")
	registerOrPanic(m, "default_github_pr", "{{GitHubPRTemplate .}}")
}
