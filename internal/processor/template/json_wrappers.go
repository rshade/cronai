// Package template provides template functions and management for CronAI.
package template

import (
	"encoding/json"
	"fmt"
	"strings"
)

// FormatGitHubHeader generates a standardized GitHub header based on template data
func FormatGitHubHeader(data Data, title string) string {
	var header strings.Builder

	header.WriteString(fmt.Sprintf("## %s\n\n", title))
	header.WriteString(fmt.Sprintf("**Model**: %s\n", data.Model))
	header.WriteString(fmt.Sprintf("**Timestamp**: %s\n", data.Timestamp.Format("Jan 02, 2006 15:04:05")))

	return header.String()
}

// FormatGitHubVariables formats the variables section if present
func FormatGitHubVariables(data Data) string {
	if len(data.Variables) == 0 {
		return ""
	}

	var vars strings.Builder
	vars.WriteString("### Variables\n")
	for k, v := range data.Variables {
		vars.WriteString(fmt.Sprintf("- %s: %s\n", k, v))
	}
	vars.WriteString("\n")

	return vars.String()
}

// FormatGitHubContent formats the content section
func FormatGitHubContent(content string, showContentHeader bool) string {
	var contentBuilder strings.Builder

	if showContentHeader {
		contentBuilder.WriteString("### Content\n\n")
	}

	contentBuilder.WriteString(content)
	contentBuilder.WriteString("\n\n")

	return contentBuilder.String()
}

// FormatGitHubFooter generates a standardized GitHub footer
func FormatGitHubFooter(model string) string {
	return fmt.Sprintf("---\n_Generated by CronAI using %s model_", model)
}

// marshalToJSON is a helper function to convert a map to a JSON string
func marshalToJSON(data map[string]interface{}, fallbackTitle string) string {
	jsonBytes, err := json.Marshal(data)
	if err != nil {
		// Provide simple fallback if marshaling fails
		if fallbackTitle != "" {
			_, titleErr := json.Marshal(fallbackTitle)
			if titleErr != nil {
				// If even the fallback title can't be marshaled, use a generic fallback
				return `{"title":"Unknown","body":"Error generating JSON"}`
			}
			// Construct the JSON object using structured serialization
			fallbackData := map[string]string{
				"title": fallbackTitle,
				"body":  "Error generating JSON",
			}
			finalJSON, err := json.Marshal(fallbackData)
			if err != nil {
				return `{"title":"Error","body":"Failed to generate JSON"}`
			}
			return string(finalJSON)
		}
		return `{"body":"Error generating JSON"}`
	}
	return string(jsonBytes)
}

// GitHubIssueTemplate returns a JSON structure for a GitHub issue
func GitHubIssueTemplate(data Data) string {
	title := fmt.Sprintf("%s - %s", data.PromptName, data.Metadata["date"])

	// Build the body using helper functions
	var bodyBuilder strings.Builder

	// Add header
	header := FormatGitHubHeader(data, "Generated by CronAI")
	bodyBuilder.WriteString(header)

	// Add execution ID
	bodyBuilder.WriteString(fmt.Sprintf("**Execution ID**: %s\n\n", data.ExecutionID))

	// Add variables section
	bodyBuilder.WriteString(FormatGitHubVariables(data))

	// Add content section
	bodyBuilder.WriteString(FormatGitHubContent(data.Content, true))

	// Add footer
	bodyBuilder.WriteString(FormatGitHubFooter(data.Model))

	// Create structured data for JSON serialization
	issueData := map[string]interface{}{
		"title":  title,
		"body":   bodyBuilder.String(),
		"labels": []string{"auto-generated", "cronai"},
	}

	return marshalToJSON(issueData, title)
}

// GitHubCommentTemplate returns a JSON structure for a GitHub comment
func GitHubCommentTemplate(data Data) string {
	// Build the body using helper functions
	var bodyBuilder strings.Builder

	// Add header
	header := FormatGitHubHeader(data, "AI Response")
	bodyBuilder.WriteString(header)

	// Add prompt name
	bodyBuilder.WriteString(fmt.Sprintf("**Prompt**: %s\n\n", data.PromptName))

	// Add content section (without header)
	bodyBuilder.WriteString(FormatGitHubContent(data.Content, false))

	// Add footer
	bodyBuilder.WriteString(FormatGitHubFooter(data.Model))

	// Create structured data for JSON serialization
	commentData := map[string]interface{}{
		"body": bodyBuilder.String(),
	}

	return marshalToJSON(commentData, "")
}

// GitHubPRTemplate returns a JSON structure for a GitHub pull request
func GitHubPRTemplate(data Data) string {
	title := fmt.Sprintf("%s - %s", data.PromptName, data.Metadata["date"])

	// Build the body using helper functions
	var bodyBuilder strings.Builder

	// Add header
	header := FormatGitHubHeader(data, "Generated by CronAI")
	bodyBuilder.WriteString(header)

	// Add execution ID
	bodyBuilder.WriteString(fmt.Sprintf("**Execution ID**: %s\n\n", data.ExecutionID))

	// Add variables section
	bodyBuilder.WriteString(FormatGitHubVariables(data))

	// Add content section
	bodyBuilder.WriteString(FormatGitHubContent(data.Content, true))

	// Add footer
	bodyBuilder.WriteString(FormatGitHubFooter(data.Model))

	// Get head branch from variables or default
	headBranch := data.Variables["head_branch"]
	if headBranch == "" {
		headBranch = "feature-branch"
	}

	// Get base branch from variables or default to main
	baseBranch := data.Variables["base_branch"]
	if baseBranch == "" {
		baseBranch = "main"
	}

	// Create structured data for JSON serialization
	prData := map[string]interface{}{
		"title": title,
		"body":  bodyBuilder.String(),
		"head":  headBranch,
		"base":  baseBranch,
	}

	return marshalToJSON(prData, title)
}
