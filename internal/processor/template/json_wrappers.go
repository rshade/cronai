// Package template provides template functions and management for CronAI.
package template

import (
	"encoding/json"
	"fmt"
)

// JSONEscape escapes the given string for safe inclusion in JSON
func JSONEscape(s string) string {
	b, err := json.Marshal(s)
	if err != nil {
		// This shouldn't happen for strings, but if it does, return a safe version
		return fmt.Sprintf("%q", s)
	}
	// Remove the surrounding quotes that json.Marshal adds
	return string(b[1 : len(b)-1])
}

// GitHubIssueTemplate returns a JSON structure for a GitHub issue
func GitHubIssueTemplate(data Data) string {
	title := fmt.Sprintf("%s - %s", data.PromptName, data.Metadata["date"])

	// Format variables section
	variablesSection := ""
	if len(data.Variables) > 0 {
		variablesSection = "### Variables\n"
		for k, v := range data.Variables {
			variablesSection += fmt.Sprintf("- %s: %s\n", k, v)
		}
	}

	// Format body with proper JSON escaping
	body := fmt.Sprintf("## Generated by CronAI\n\n"+
		"**Model**: %s\n"+
		"**Timestamp**: %s\n"+
		"**Execution ID**: %s\n\n"+
		"%s\n"+
		"### Content\n\n"+
		"%s\n\n"+
		"---\n"+
		"_Generated by CronAI using %s model_",
		data.Model,
		data.Timestamp.Format("Jan 02, 2006 15:04:05"),
		data.ExecutionID,
		variablesSection,
		data.Content,
		data.Model)

	// Escape for JSON
	bodyEscaped := JSONEscape(body)

	// Build JSON
	return fmt.Sprintf(`{
		"title": "%s",
		"body": "%s",
		"labels": ["auto-generated", "cronai"]
	}`, title, bodyEscaped)
}

// GitHubCommentTemplate returns a JSON structure for a GitHub comment
func GitHubCommentTemplate(data Data) string {
	// Format body with proper JSON escaping
	body := fmt.Sprintf("## AI Response\n\n"+
		"**Model**: %s\n"+
		"**Timestamp**: %s\n"+
		"**Prompt**: %s\n\n"+
		"%s\n\n"+
		"---\n"+
		"_Generated by CronAI using %s model_",
		data.Model,
		data.Timestamp.Format("Jan 02, 2006 15:04:05"),
		data.PromptName,
		data.Content,
		data.Model)

	// Escape for JSON
	bodyEscaped := JSONEscape(body)

	// Build JSON
	return fmt.Sprintf(`{
		"body": "%s"
	}`, bodyEscaped)
}

// GitHubPRTemplate returns a JSON structure for a GitHub pull request
func GitHubPRTemplate(data Data) string {
	title := fmt.Sprintf("%s - %s", data.PromptName, data.Metadata["date"])

	// Format variables section
	variablesSection := ""
	if len(data.Variables) > 0 {
		variablesSection = "### Variables\n"
		for k, v := range data.Variables {
			variablesSection += fmt.Sprintf("- %s: %s\n", k, v)
		}
	}

	// Format body with proper JSON escaping
	body := fmt.Sprintf("## Generated by CronAI\n\n"+
		"**Model**: %s\n"+
		"**Timestamp**: %s\n"+
		"**Execution ID**: %s\n\n"+
		"%s\n"+
		"### Content\n\n"+
		"%s\n\n"+
		"---\n"+
		"_Generated by CronAI using %s model_",
		data.Model,
		data.Timestamp.Format("Jan 02, 2006 15:04:05"),
		data.ExecutionID,
		variablesSection,
		data.Content,
		data.Model)

	// Escape for JSON
	bodyEscaped := JSONEscape(body)

	// Get head branch from variables or default
	headBranch := data.Variables["head_branch"]
	if headBranch == "" {
		headBranch = "feature-branch"
	}

	// Get base branch from variables or default to main
	baseBranch := data.Variables["base_branch"]
	if baseBranch == "" {
		baseBranch = "main"
	}

	// Build JSON
	return fmt.Sprintf(`{
		"title": "%s",
		"body": "%s",
		"head": "%s",
		"base": "%s"
	}`, title, bodyEscaped, headBranch, baseBranch)
}
