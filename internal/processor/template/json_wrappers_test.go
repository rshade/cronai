package template

import (
	"testing"
	"time"

	"github.com/stretchr/testify/assert"
)

func TestJSONEscape(t *testing.T) {
	tests := []struct {
		name     string
		input    string
		expected string
	}{
		{
			name:     "simple string",
			input:    "hello world",
			expected: "hello world",
		},
		{
			name:     "string with quotes",
			input:    "hello \"world\"",
			expected: "hello \\\"world\\\"",
		},
		{
			name:     "string with newlines",
			input:    "hello\nworld",
			expected: "hello\\nworld",
		},
		{
			name:     "string with backslashes",
			input:    "hello\\world",
			expected: "hello\\\\world",
		},
		{
			name:     "string with special characters",
			input:    "hello\tworld\r\n",
			expected: "hello\\tworld\\r\\n",
		},
		{
			name:     "empty string",
			input:    "",
			expected: "",
		},
		{
			name:     "string with unicode",
			input:    "hello 世界",
			expected: "hello 世界",
		},
		{
			name:     "string with json control characters",
			input:    "{ \"key\": \"value\" }",
			expected: "{ \\\"key\\\": \\\"value\\\" }",
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			result := JSONEscape(tt.input)
			assert.Equal(t, tt.expected, result)
		})
	}
}

func TestGitHubIssueTemplate(t *testing.T) {
	// Create test data
	testTime := time.Date(2024, 3, 15, 12, 30, 45, 0, time.UTC)
	data := Data{
		Content:     "This is the AI generated content",
		Model:       "claude-3-sonnet",
		Timestamp:   testTime,
		PromptName:  "weekly_report",
		ExecutionID: "exec-123456",
		Variables: map[string]string{
			"reportType": "Weekly",
			"team":       "Engineering",
		},
		Metadata: map[string]string{
			"date": "2024-03-15",
		},
	}

	// Generate the template
	result := GitHubIssueTemplate(data)

	// Verify content - note that json.Marshal produces more compact JSON
	assert.Contains(t, result, `"title":"weekly_report - 2024-03-15"`)
	assert.Contains(t, result, `"labels":["auto-generated","cronai"]`)
	assert.Contains(t, result, `"body":"`)

	// These fields should still be in the body content
	assert.Contains(t, result, "**Model**: claude-3-sonnet")
	assert.Contains(t, result, "Mar 15, 2024 12:30:45")
	assert.Contains(t, result, "**Execution ID**: exec-123456")
	assert.Contains(t, result, "### Variables")
	assert.Contains(t, result, "- reportType: Weekly")
	assert.Contains(t, result, "- team: Engineering")
	assert.Contains(t, result, "### Content")
	assert.Contains(t, result, "This is the AI generated content")
	assert.Contains(t, result, "_Generated by CronAI using claude-3-sonnet model_")
}

func TestGitHubCommentTemplate(t *testing.T) {
	// Create test data
	testTime := time.Date(2024, 3, 15, 12, 30, 45, 0, time.UTC)
	data := Data{
		Content:     "This is a comment from AI",
		Model:       "claude-3-sonnet",
		Timestamp:   testTime,
		PromptName:  "issue_response",
		ExecutionID: "exec-123456",
	}

	// Generate the template
	result := GitHubCommentTemplate(data)

	// Verify content - note that json.Marshal produces more compact JSON
	assert.Contains(t, result, `"body":"`)
	assert.Contains(t, result, "## AI Response")
	assert.Contains(t, result, "**Model**: claude-3-sonnet")
	assert.Contains(t, result, "Mar 15, 2024 12:30:45")
	assert.Contains(t, result, "**Prompt**: issue_response")
	assert.Contains(t, result, "This is a comment from AI")
	assert.Contains(t, result, "_Generated by CronAI using claude-3-sonnet model_")
}

func TestGitHubPRTemplate(t *testing.T) {
	// Create test data
	testTime := time.Date(2024, 3, 15, 12, 30, 45, 0, time.UTC)
	data := Data{
		Content:     "This PR adds new features",
		Model:       "claude-3-sonnet",
		Timestamp:   testTime,
		PromptName:  "feature_request",
		ExecutionID: "exec-123456",
		Variables: map[string]string{
			"head_branch": "feature/new-api",
			"base_branch": "develop",
		},
		Metadata: map[string]string{
			"date": "2024-03-15",
		},
	}

	// Generate the template
	result := GitHubPRTemplate(data)

	// Verify content - note that json.Marshal produces more compact JSON
	assert.Contains(t, result, `"title":"feature_request - 2024-03-15"`)
	assert.Contains(t, result, `"body":"`)
	assert.Contains(t, result, "**Model**: claude-3-sonnet")
	assert.Contains(t, result, "Mar 15, 2024 12:30:45")
	assert.Contains(t, result, "**Execution ID**: exec-123456")
	assert.Contains(t, result, "### Variables")
	assert.Contains(t, result, "- head_branch: feature/new-api")
	assert.Contains(t, result, "- base_branch: develop")
	assert.Contains(t, result, "### Content")
	assert.Contains(t, result, "This PR adds new features")
	assert.Contains(t, result, "_Generated by CronAI using claude-3-sonnet model_")
	assert.Contains(t, result, `"head":"feature/new-api"`)
	assert.Contains(t, result, `"base":"develop"`)
}

func TestGitHubPRTemplate_DefaultBranches(t *testing.T) {
	// Test with missing branch information
	testTime := time.Date(2024, 3, 15, 12, 30, 45, 0, time.UTC)
	data := Data{
		Content:     "This PR adds new features",
		Model:       "claude-3-sonnet",
		Timestamp:   testTime,
		PromptName:  "feature_request",
		ExecutionID: "exec-123456",
		Variables:   map[string]string{},
		Metadata: map[string]string{
			"date": "2024-03-15",
		},
	}

	// Generate the template
	result := GitHubPRTemplate(data)

	// Verify default branch values are used - note that json.Marshal produces more compact JSON
	assert.Contains(t, result, `"head":"feature-branch"`)
	assert.Contains(t, result, `"base":"main"`)
}
