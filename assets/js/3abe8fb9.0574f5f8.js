"use strict";(self.webpackChunkcronai_docs=self.webpackChunkcronai_docs||[]).push([[485],{6180:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>a,contentTitle:()=>s,default:()=>d,frontMatter:()=>l,metadata:()=>t,toc:()=>g});const t=JSON.parse('{"id":"logging","title":"Logging Configuration","description":"CronAI implements structured logging with configurable log levels to help with troubleshooting and monitoring.","source":"@site/docs/logging.md","sourceDirName":".","slug":"/logging","permalink":"/cronai/docs/logging","draft":false,"unlisted":false,"editUrl":"https://github.com/rshade/cronai/tree/main/site-docs/docs/logging.md","tags":[],"version":"current","frontMatter":{"id":"logging","title":"Logging Configuration","sidebar_label":"Logging"},"sidebar":"tutorialSidebar","previous":{"title":"Model Parameters","permalink":"/cronai/docs/model-parameters"},"next":{"title":"Troubleshooting","permalink":"/cronai/docs/troubleshooting"}}');var i=o(4848),r=o(8453);const l={id:"logging",title:"Logging Configuration",sidebar_label:"Logging"},s=void 0,a={},g=[{value:"Log Levels",id:"log-levels",level:2},{value:"Configuring Log Level",id:"configuring-log-level",level:2}];function c(e){const n={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"CronAI implements structured logging with configurable log levels to help with troubleshooting and monitoring."}),"\n",(0,i.jsx)(n.h2,{id:"log-levels",children:"Log Levels"}),"\n",(0,i.jsx)(n.p,{children:"The following log levels are supported, in order of increasing severity:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"DEBUG"}),": Detailed information, typically only useful when troubleshooting issues"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"INFO"}),": General information about the normal operation of the application"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"WARN"}),": Warnings that don't affect application function but should be addressed"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"ERROR"}),": Errors that affect application function but don't cause termination"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"FATAL"}),": Fatal errors that require application termination"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"configuring-log-level",children:"Configuring Log Level"}),"\n",(0,i.jsxs)(n.p,{children:["The log level can be configured through the ",(0,i.jsx)(n.code,{children:"LOG_LEVEL"})," environment variable:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'export LOG_LEVEL=DEBUG\n./cronai start\n```text\n\nValid values for `LOG_LEVEL` are: `DEBUG`, `INFO`, `WARN`, `ERROR`, `FATAL`.\n\nIf not specified, the default log level is `INFO`.\n\n## Structured Logging\n\nCronAI uses structured logging to provide context for log messages. Each log message includes:\n\n- Timestamp in RFC3339 format\n- Log level\n- Message\n- File and line number (for debugging)\n- Additional metadata specific to the log message\n\nExample log output:\n\n```text\n[2025-05-18T14:30:45Z] [INFO] (service.go:40) Starting CronAI service | config_path=/etc/cronai/cronai.config\n[2025-05-18T14:30:45Z] [INFO] (service.go:207) Successfully parsed configuration file | path=/etc/cronai/cronai.config, task_count=3\n[2025-05-18T14:30:45Z] [INFO] (service.go:70) Scheduled task | task_index=0, schedule=0 9 * * 1-5, model=claude, prompt=weekly_report, processor=email-team@company.com\n```text\n\n## JSON Logging\n\nFor integration with log management systems, CronAI supports JSON-formatted logs. To enable JSON logging, set the `LOG_FORMAT` environment variable to `JSON`:\n\n```bash\nexport LOG_FORMAT=JSON\n./cronai start\n```text\n\nExample JSON log output:\n\n```json\n{"time":"2025-05-18T14:30:45Z","level":"INFO","message":"Starting CronAI service","file":"service.go","line":40,"metadata":{"config_path":"/etc/cronai/cronai.config"}}\n{"time":"2025-05-18T14:30:45Z","level":"INFO","message":"Successfully parsed configuration file","file":"service.go","line":207,"metadata":{"path":"/etc/cronai/cronai.config","task_count":3}}\n```text\n\n## Error Handling\n\nCronAI implements categorized error handling through the `errors` package. Errors are categorized as:\n\n- **CONFIGURATION**: Errors related to configuration files and parameters\n- **VALIDATION**: Errors related to input validation\n- **EXTERNAL**: Errors from external services (APIs, etc.)\n- **SYSTEM**: System-level errors (file I/O, etc.)\n- **APPLICATION**: Application-level errors\n\nError logs include the error category and additional context information to aid in troubleshooting.\n\n## Log File\n\nBy default, logs are written to STDOUT. To direct logs to a file, use the `LOG_FILE` environment variable:\n\n```bash\nexport LOG_FILE=/var/log/cronai.log\n./cronai start\n```text\n\nIf not specified, logs are written to STDOUT.\n\n## Troubleshooting\n\nFor troubleshooting issues, set the log level to DEBUG:\n\n```bash\nexport LOG_LEVEL=DEBUG\n./cronai start\n```text\n\nThis will provide detailed logs of all operations, including prompt loading, model execution, and response processing.\n'})})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>l,x:()=>s});var t=o(6540);const i={},r=t.createContext(i);function l(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);