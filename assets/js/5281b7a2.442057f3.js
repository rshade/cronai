"use strict";(self.webpackChunkcronai_docs=self.webpackChunkcronai_docs||[]).push([[443],{5874:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"architecture","title":"CronAI Architecture","description":"This document provides an overview of the CronAI system architecture, explaining the key components, their interactions, and design principles.","source":"@site/docs/architecture.md","sourceDirName":".","slug":"/architecture","permalink":"/cronai/docs/architecture","draft":false,"unlisted":false,"editUrl":"https://github.com/rshade/cronai/tree/main/site-docs/docs/architecture.md","tags":[],"version":"current","frontMatter":{"id":"architecture","title":"CronAI Architecture","sidebar_label":"Architecture"},"sidebar":"tutorialSidebar","previous":{"title":"Introduction","permalink":"/cronai/docs/"},"next":{"title":"Limitations & Roadmap","permalink":"/cronai/docs/limitations-and-improvements"}}');var r=s(4848),t=s(8453);const o={id:"architecture",title:"CronAI Architecture",sidebar_label:"Architecture"},l=void 0,c={},a=[{value:"System Overview",id:"system-overview",level:2},{value:"Operation Modes (v0.0.2+)",id:"operation-modes-v002",level:2},{value:"Components Diagram",id:"components-diagram",level:2},{value:"Key Components",id:"key-components",level:2},{value:"1. Command-Line Interface (CLI)",id:"1-command-line-interface-cli",level:3},{value:"2. Configuration Management",id:"2-configuration-management",level:3},{value:"3. Cron Scheduling Service",id:"3-cron-scheduling-service",level:3},{value:"4. Prompt Management",id:"4-prompt-management",level:3},{value:"5. Model Execution",id:"5-model-execution",level:3},{value:"6. Response Processing",id:"6-response-processing",level:3},{value:"7. Templating System",id:"7-templating-system",level:3},{value:"Interfaces and Design Patterns",id:"interfaces-and-design-patterns",level:2},{value:"1. Interface-Based Design",id:"1-interface-based-design",level:3},{value:"2. Factory Pattern",id:"2-factory-pattern",level:3},{value:"3. Singleton Pattern",id:"3-singleton-pattern",level:3},{value:"4. Registry Pattern",id:"4-registry-pattern",level:3},{value:"Data Flow",id:"data-flow",level:2},{value:"Configuration to Execution Flow",id:"configuration-to-execution-flow",level:3},{value:"Error Handling",id:"error-handling",level:2},{value:"Extension Points",id:"extension-points",level:2},{value:"Testing Strategy",id:"testing-strategy",level:2},{value:"Current Limitations",id:"current-limitations",level:2}];function d(e){const n={br:"br",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"This document provides an overview of the CronAI system architecture, explaining the key components, their interactions, and design principles."}),"\n",(0,r.jsx)(n.h2,{id:"system-overview",children:"System Overview"}),"\n",(0,r.jsx)(n.p,{children:"CronAI is built as a modular Go application that connects scheduled tasks to AI models and processes their responses. The system follows a pipeline architecture:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"Configuration \u2192 Scheduling \u2192 Prompt Management \u2192 Model Execution \u2192 Response Processing\n"})}),"\n",(0,r.jsx)(n.h2,{id:"operation-modes-v002",children:"Operation Modes (v0.0.2+)"}),"\n",(0,r.jsx)(n.p,{children:"CronAI is designed to support multiple operation modes to accommodate different use cases:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Cron Mode"})," (default, currently implemented): Traditional scheduled task execution using cron syntax"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Bot Mode"})," (planned): Event-driven webhook handler for real-time AI responses"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Queue Mode"})," (planned): Job queue processor for distributed task execution"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"--mode"})," flag was introduced in v0.0.2 as a stub implementation to establish the CLI interface early, avoiding breaking changes when additional modes are implemented. Currently, only 'cron' mode is functional."]}),"\n",(0,r.jsx)(n.h2,{id:"components-diagram",children:"Components Diagram"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ascii",children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502            \u2502     \u2502            \u2502     \u2502            \u2502     \u2502            \u2502     \u2502            \u2502\n\u2502    CLI     \u2502\u2500\u2500\u2500\u2500\u25b6\u2502    Cron    \u2502\u2500\u2500\u2500\u2500\u25b6\u2502   Prompt   \u2502\u2500\u2500\u2500\u2500\u25b6\u2502   Models   \u2502\u2500\u2500\u2500\u2500\u25b6\u2502 Processors \u2502\n\u2502  Commands  \u2502     \u2502  Service   \u2502     \u2502  Manager   \u2502     \u2502   Client   \u2502     \u2502            \u2502\n\u2502            \u2502     \u2502            \u2502     \u2502            \u2502     \u2502            \u2502     \u2502            \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n       \u2502                 \u25b2                  \u25b2                  \u25b2                  \u25b2\n       \u2502                 \u2502                  \u2502                  \u2502                  \u2502\n       \u2502                 \u2502                  \u2502                  \u2502                  \u2502\n       \u25bc                 \u2502                  \u2502                  \u2502                  \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502            \u2502     \u2502            \u2502     \u2502            \u2502     \u2502            \u2502     \u2502            \u2502\n\u2502   Config   \u2502\u2500\u2500\u2500\u2500\u25b6\u2502Environment \u2502     \u2502  Template  \u2502     \u2502   Model    \u2502     \u2502  Template  \u2502\n\u2502  Manager   \u2502     \u2502 Variables  \u2502     \u2502  System    \u2502     \u2502   Config   \u2502     \u2502  System    \u2502\n\u2502            \u2502     \u2502            \u2502     \u2502            \u2502     \u2502            \u2502     \u2502            \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,r.jsx)(n.h2,{id:"key-components",children:"Key Components"}),"\n",(0,r.jsx)(n.h3,{id:"1-command-line-interface-cli",children:"1. Command-Line Interface (CLI)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Location"}),": ",(0,r.jsx)(n.code,{children:"cmd/cronai/"}),(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.strong,{children:"Responsibility"}),": Provides the user interface to interact with the system",(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.strong,{children:"Key Features"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Command parsing using Cobra framework"}),"\n",(0,r.jsx)(n.li,{children:"Start/stop/run commands for service control"}),"\n",(0,r.jsx)(n.li,{children:"Prompt management commands"}),"\n",(0,r.jsx)(n.li,{children:"Configuration validation"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"2-configuration-management",children:"2. Configuration Management"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Location"}),": ",(0,r.jsx)(n.code,{children:"pkg/config/"}),(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.strong,{children:"Responsibility"}),": Loading and validating configuration",(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.strong,{children:"Key Features"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Model parameter configuration"}),"\n",(0,r.jsx)(n.li,{children:"Environment variable management"}),"\n",(0,r.jsx)(n.li,{children:"Configuration file parsing"}),"\n",(0,r.jsx)(n.li,{children:"Parameter validation"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"3-cron-scheduling-service",children:"3. Cron Scheduling Service"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Location"}),": ",(0,r.jsx)(n.code,{children:"internal/cron/"}),(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.strong,{children:"Responsibility"}),": Manages scheduled task execution",(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.strong,{children:"Key Features"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Parses cron expressions"}),"\n",(0,r.jsx)(n.li,{children:"Schedules tasks based on configuration"}),"\n",(0,r.jsx)(n.li,{children:"Manages task lifecycle"}),"\n",(0,r.jsx)(n.li,{children:"Handles service start/stop"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"4-prompt-management",children:"4. Prompt Management"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Location"}),": ",(0,r.jsx)(n.code,{children:"internal/prompt/"}),(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.strong,{children:"Responsibility"}),": Manages prompt loading and preprocessing",(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.strong,{children:"Key Features"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"File-based prompt loading"}),"\n",(0,r.jsx)(n.li,{children:"Variable substitution"}),"\n",(0,r.jsx)(n.li,{children:"Prompt metadata parsing"}),"\n",(0,r.jsx)(n.li,{children:"Prompt searching and listing"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"5-model-execution",children:"5. Model Execution"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Location"}),": ",(0,r.jsx)(n.code,{children:"internal/models/"}),(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.strong,{children:"Responsibility"}),": Communicates with AI model APIs",(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.strong,{children:"Key Features"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Model client interface abstraction"}),"\n",(0,r.jsx)(n.li,{children:"Multiple model support (OpenAI, Claude, Gemini)"}),"\n",(0,r.jsx)(n.li,{children:"Standard response format"}),"\n",(0,r.jsx)(n.li,{children:"Fallback mechanism"}),"\n",(0,r.jsx)(n.li,{children:"Error handling and retries"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"6-response-processing",children:"6. Response Processing"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Location"}),": ",(0,r.jsx)(n.code,{children:"internal/processor/"}),(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.strong,{children:"Responsibility"}),": Processes model responses into output formats",(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.strong,{children:"Key Features"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Processor interface for consistent handling"}),"\n",(0,r.jsx)(n.li,{children:"Multiple output channels (File, GitHub, Console)"}),"\n",(0,r.jsx)(n.li,{children:"Registry pattern for processor management"}),"\n",(0,r.jsx)(n.li,{children:"Configuration validation"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"7-templating-system",children:"7. Templating System"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Location"}),": ",(0,r.jsx)(n.code,{children:"internal/processor/template/"}),(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.strong,{children:"Responsibility"}),": Formats output based on templates",(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.strong,{children:"Key Features"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Template loading and management"}),"\n",(0,r.jsx)(n.li,{children:"Standard template variables"}),"\n",(0,r.jsx)(n.li,{children:"Output formatting"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"interfaces-and-design-patterns",children:"Interfaces and Design Patterns"}),"\n",(0,r.jsx)(n.p,{children:"CronAI employs several design patterns to maintain clean architecture:"}),"\n",(0,r.jsx)(n.h3,{id:"1-interface-based-design",children:"1. Interface-Based Design"}),"\n",(0,r.jsx)(n.p,{children:"The system uses interfaces to define clear boundaries between components:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"// ModelClient defines the interface for AI model clients\ntype ModelClient interface {\n    Execute(promptContent string) (*ModelResponse, error)\n}\n\n// Processor defines the interface for response processors\ntype Processor interface {\n    Process(response *models.ModelResponse, templateName string) error\n    Validate() error\n    GetType() string\n    GetConfig() ProcessorConfig\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"2-factory-pattern",children:"2. Factory Pattern"}),"\n",(0,r.jsx)(n.p,{children:"Used in the processor system to create processor instances dynamically:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"// RegisterProcessor adds a processor factory to the registry\nfunc RegisterProcessor(processorType string, factory ProcessorFactory)\n\n// GetProcessor creates a processor of the specified type\nfunc GetProcessor(processorType string, config ProcessorConfig) (Processor, error)\n"})}),"\n",(0,r.jsx)(n.h3,{id:"3-singleton-pattern",children:"3. Singleton Pattern"}),"\n",(0,r.jsx)(n.p,{children:"Used for managers that need to maintain global state:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"// GetInstance returns the singleton template manager instance\nfunc GetInstance() *Manager\n"})}),"\n",(0,r.jsx)(n.h3,{id:"4-registry-pattern",children:"4. Registry Pattern"}),"\n",(0,r.jsx)(n.p,{children:"Used to register and manage available processors:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'// In registry.go, processors register themselves:\nfunc init() {\n    RegisterProcessor("file", NewFileProcessor)\n    RegisterProcessor("github", NewGithubProcessor)\n    RegisterProcessor("console", NewConsoleProcessor)\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"data-flow",children:"Data Flow"}),"\n",(0,r.jsx)(n.h3,{id:"configuration-to-execution-flow",children:"Configuration to Execution Flow"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Configuration Loading"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Parse configuration file with cron schedule, model, prompt, and processor"}),"\n",(0,r.jsx)(n.li,{children:"Load environment variables for API keys and other settings"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Scheduling"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Cron service parses schedule and creates tasks"}),"\n",(0,r.jsx)(n.li,{children:"Tasks are scheduled using cron library"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Task Execution"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"When triggered, task loads the specified prompt"}),"\n",(0,r.jsx)(n.li,{children:"Variables are replaced in the prompt content"}),"\n",(0,r.jsx)(n.li,{children:"Prompt is passed to the specified model"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Model Execution"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"ModelClient for the specified model is created"}),"\n",(0,r.jsx)(n.li,{children:"Model parameters are applied"}),"\n",(0,r.jsx)(n.li,{children:"Prompt is sent to the AI API"}),"\n",(0,r.jsx)(n.li,{children:"Response is received and standardized"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Response Processing"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Appropriate processor is created based on configuration"}),"\n",(0,r.jsx)(n.li,{children:"Processor formats and delivers the response"}),"\n",(0,r.jsx)(n.li,{children:"Output is sent to the configured destination"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,r.jsx)(n.p,{children:"The system uses a consistent error handling pattern:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Error Categorization"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Errors are categorized (Configuration, Validation, Application, IO)"}),"\n",(0,r.jsx)(n.li,{children:"Structured logging with error context"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Graceful Degradation"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Model fallback mechanism when primary model fails"}),"\n",(0,r.jsx)(n.li,{children:"Retry logic with configurable attempts"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Validation Hierarchy"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Configuration validation before execution"}),"\n",(0,r.jsx)(n.li,{children:"Input validation at each processing stage"}),"\n",(0,r.jsx)(n.li,{children:"Clear error messages for troubleshooting"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"extension-points",children:"Extension Points"}),"\n",(0,r.jsx)(n.p,{children:"CronAI is designed to be extended in several ways:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"New Models"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Implement the ",(0,r.jsx)(n.code,{children:"ModelClient"})," interface"]}),"\n",(0,r.jsxs)(n.li,{children:["Register in the ",(0,r.jsx)(n.code,{children:"defaultCreateModelClient"})," function"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"New Processors"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Implement the ",(0,r.jsx)(n.code,{children:"Processor"})," interface"]}),"\n",(0,r.jsx)(n.li,{children:"Register with the processor registry"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"New CLI Commands"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Add new commands to the Cobra command structure"}),"\n",(0,r.jsxs)(n.li,{children:["Follow the existing pattern in ",(0,r.jsx)(n.code,{children:"cmd/cronai/cmd/"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"testing-strategy",children:"Testing Strategy"}),"\n",(0,r.jsx)(n.p,{children:"The architecture supports comprehensive testing:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Unit Testing"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Each component can be tested in isolation"}),"\n",(0,r.jsx)(n.li,{children:"Mock implementations of interfaces"}),"\n",(0,r.jsx)(n.li,{children:"Table-driven tests for different scenarios"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Integration Testing"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"End-to-end workflow tests"}),"\n",(0,r.jsx)(n.li,{children:"Configuration validation tests"}),"\n",(0,r.jsx)(n.li,{children:"Real external services can be mocked"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"current-limitations",children:"Current Limitations"}),"\n",(0,r.jsx)(n.p,{children:"The MVP architecture has some known limitations:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"No automatic handling of API rate limits"}),"\n",(0,r.jsx)(n.li,{children:"No persistent storage for response history"}),"\n",(0,r.jsx)(n.li,{children:"Limited response processor options"}),"\n",(0,r.jsx)(n.li,{children:"No web UI for management"}),"\n",(0,r.jsx)(n.li,{children:"No response templating capabilities yet"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"These limitations are planned to be addressed in post-MVP releases."})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>l});var i=s(6540);const r={},t=i.createContext(r);function o(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);