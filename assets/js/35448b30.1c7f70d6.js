"use strict";(self.webpackChunkcronai_docs=self.webpackChunkcronai_docs||[]).push([[4],{8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>o});var i=s(6540);const r={},t=i.createContext(r);function l(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),i.createElement(t.Provider,{value:n},e.children)}},9861:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"queue","title":"Queue Integration","description":"Overview","source":"@site/docs/queue.md","sourceDirName":".","slug":"/queue","permalink":"/cronai/docs/queue","draft":false,"unlisted":false,"editUrl":"https://github.com/rshade/cronai/tree/main/site-docs/docs/queue.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5}}');var r=s(4848),t=s(8453);const l={sidebar_position:5},o="Queue Integration",a={},c=[{value:"Overview",id:"overview",level:2},{value:"Architecture",id:"architecture",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Syntax",id:"syntax",level:3},{value:"Parameters",id:"parameters",level:3},{value:"Standard Options",id:"standard-options",level:3},{value:"Provider-Specific Options",id:"provider-specific-options",level:3},{value:"Message Formats",id:"message-formats",level:2},{value:"Comprehensive Format",id:"comprehensive-format",level:3},{value:"Minimal Format",id:"minimal-format",level:3},{value:"Inline Prompts",id:"inline-prompts",level:2},{value:"Retry Policies",id:"retry-policies",level:2},{value:"Exponential Backoff",id:"exponential-backoff",level:3},{value:"Linear Retry",id:"linear-retry",level:3},{value:"No Retry",id:"no-retry",level:3},{value:"Error Handling",id:"error-handling",level:2},{value:"Integration with Existing Features",id:"integration-with-existing-features",level:2},{value:"Examples",id:"examples",level:2},{value:"Basic Queue Configuration",id:"basic-queue-configuration",level:3},{value:"Multiple Queue Consumers",id:"multiple-queue-consumers",level:3},{value:"Mixed Configuration",id:"mixed-configuration",level:3},{value:"Security Considerations",id:"security-considerations",level:2},{value:"Performance Considerations",id:"performance-considerations",level:2},{value:"Monitoring and Observability",id:"monitoring-and-observability",level:2},{value:"Future Enhancements",id:"future-enhancements",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Issues",id:"common-issues",level:3},{value:"Debug Logging",id:"debug-logging",level:3},{value:"API Reference",id:"api-reference",level:2},{value:"Consumer Interface",id:"consumer-interface",level:3},{value:"Message Structure",id:"message-structure",level:3},{value:"Task Message",id:"task-message",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"queue-integration",children:"Queue Integration"})}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsx)(n.p,{children:"CronAI's queue integration feature (available in v0.0.2+) provides core infrastructure for consuming tasks from message queues. This enables dynamic task distribution, real-time processing, and seamless integration with external systems."}),"\n",(0,r.jsx)(n.h2,{id:"architecture",children:"Architecture"}),"\n",(0,r.jsx)(n.p,{children:"The queue system is built with a plugin architecture that allows for easy extension with new queue providers. The core components include:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Consumer Interface"}),": Standard interface that all queue providers must implement"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Plugin Registry"}),": Dynamic registration system for queue providers"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Message Parser"}),": Handles both minimal and comprehensive message formats"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Task Processor"}),": Bridges queue messages with the existing model execution system"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Coordinator"}),": Manages multiple queue consumers concurrently"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Retry Mechanisms"}),": Configurable retry policies for failed messages"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,r.jsxs)(n.p,{children:["Queue consumers are configured alongside cron tasks in the ",(0,r.jsx)(n.code,{children:"cronai.config"})," file."]}),"\n",(0,r.jsx)(n.h3,{id:"syntax",children:"Syntax"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"queue <name> <type> <connection> <queue> [options]\n"})}),"\n",(0,r.jsx)(n.h3,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"name"}),": Unique identifier for the queue consumer (e.g., ",(0,r.jsx)(n.code,{children:"main-queue"}),", ",(0,r.jsx)(n.code,{children:"priority-tasks"}),")"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"type"}),": Queue provider type (e.g., ",(0,r.jsx)(n.code,{children:"rabbitmq"}),", ",(0,r.jsx)(n.code,{children:"sqs"}),", ",(0,r.jsx)(n.code,{children:"servicebus"}),", ",(0,r.jsx)(n.code,{children:"pubsub"}),")"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"connection"}),": Connection string or URL for the queue service"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"queue"}),": Queue name, topic, or subscription identifier"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"options"}),": Comma-separated key-value pairs for configuration"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"standard-options",children:"Standard Options"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Option"}),(0,r.jsx)(n.th,{children:"Type"}),(0,r.jsx)(n.th,{children:"Default"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"retry_limit"}),(0,r.jsx)(n.td,{children:"int"}),(0,r.jsx)(n.td,{children:"3"}),(0,r.jsx)(n.td,{children:"Maximum number of retry attempts"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"retry_delay"}),(0,r.jsx)(n.td,{children:"duration"}),(0,r.jsx)(n.td,{children:"5s"}),(0,r.jsx)(n.td,{children:"Delay between retry attempts"})]})]})]}),"\n",(0,r.jsx)(n.h3,{id:"provider-specific-options",children:"Provider-Specific Options"}),"\n",(0,r.jsx)(n.p,{children:"Each queue provider may support additional options. These will be documented with each provider implementation."}),"\n",(0,r.jsx)(n.h2,{id:"message-formats",children:"Message Formats"}),"\n",(0,r.jsx)(n.p,{children:"The queue system supports two message formats to accommodate different use cases:"}),"\n",(0,r.jsx)(n.h3,{id:"comprehensive-format",children:"Comprehensive Format"}),"\n",(0,r.jsx)(n.p,{children:"The comprehensive format includes all task details in the message body:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "model": "openai",\n  "prompt": "weekly_report",\n  "processor": "email-team@example.com",\n  "variables": {\n    "week": "2024-W01",\n    "project": "CronAI",\n    "department": "Engineering"\n  },\n  "is_inline": false\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"Fields:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"model"})," (required): AI model to use (",(0,r.jsx)(n.code,{children:"openai"}),", ",(0,r.jsx)(n.code,{children:"claude"}),", ",(0,r.jsx)(n.code,{children:"gemini"}),")"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"prompt"})," (required): Prompt file name or inline prompt content"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"processor"})," (required): Response processor configuration"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"variables"})," (optional): Key-value pairs for variable substitution"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"is_inline"})," (optional): Whether ",(0,r.jsx)(n.code,{children:"prompt"})," contains inline content (default: false)"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"minimal-format",children:"Minimal Format"}),"\n",(0,r.jsx)(n.p,{children:"The minimal format includes only variables in the message body, with task configuration provided via message attributes/metadata:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "variables": {\n    "date": "2024-01-01",\n    "environment": "production",\n    "severity": "high"\n  }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"Required message attributes:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"model"}),": AI model to use"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"prompt"}),": Prompt file name"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"processor"}),": Response processor configuration"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"inline-prompts",children:"Inline Prompts"}),"\n",(0,r.jsx)(n.p,{children:"Queue messages can include inline prompts for dynamic content generation:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "model": "claude",\n  "prompt": "Analyze the following metrics and provide recommendations:\\n\\nCPU Usage: {{cpu_usage}}%\\nMemory Usage: {{memory_usage}}%\\nDisk Usage: {{disk_usage}}%\\n\\nFocus on optimization strategies.",\n  "processor": "slack-ops-alerts",\n  "variables": {\n    "cpu_usage": "85",\n    "memory_usage": "72",\n    "disk_usage": "45"\n  },\n  "is_inline": true\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["When ",(0,r.jsx)(n.code,{children:"is_inline"})," is true, the ",(0,r.jsx)(n.code,{children:"prompt"})," field contains the actual prompt content rather than a file reference."]}),"\n",(0,r.jsx)(n.h2,{id:"retry-policies",children:"Retry Policies"}),"\n",(0,r.jsx)(n.p,{children:"The queue system includes built-in retry mechanisms for handling transient failures:"}),"\n",(0,r.jsx)(n.h3,{id:"exponential-backoff",children:"Exponential Backoff"}),"\n",(0,r.jsx)(n.p,{children:"Default retry policy with exponentially increasing delays:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"First retry: 1 second"}),"\n",(0,r.jsx)(n.li,{children:"Second retry: 2 seconds"}),"\n",(0,r.jsx)(n.li,{children:"Third retry: 4 seconds"}),"\n",(0,r.jsx)(n.li,{children:"Maximum delay capped at 30 seconds"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"linear-retry",children:"Linear Retry"}),"\n",(0,r.jsx)(n.p,{children:"Fixed delay between retry attempts:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"queue tasks sqs https://sqs.region.amazonaws.com/account/queue queue-name retry_delay=10s\n"})}),"\n",(0,r.jsx)(n.h3,{id:"no-retry",children:"No Retry"}),"\n",(0,r.jsx)(n.p,{children:"Disable retries for specific consumers:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"queue critical rabbitmq amqp://localhost:5672 critical-tasks retry_limit=0\n"})}),"\n",(0,r.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,r.jsx)(n.p,{children:"The queue system provides comprehensive error handling:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Parse Errors"}),": Invalid message format results in immediate rejection without retry"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Validation Errors"}),": Invalid task configuration results in rejection without retry"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Processing Errors"}),": Transient failures trigger retry based on policy"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Connection Errors"}),": Logged and may trigger consumer restart"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"integration-with-existing-features",children:"Integration with Existing Features"}),"\n",(0,r.jsx)(n.p,{children:"Queue tasks integrate seamlessly with existing CronAI features:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Prompt Management"}),": File-based prompts work identically for queue and cron tasks"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Variable Substitution"}),": Same variable syntax and special variables"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Response Processors"}),": All processors available for both queue and cron tasks"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Model Parameters"}),": Can be specified in message attributes or variables"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,r.jsx)(n.h3,{id:"basic-queue-configuration",children:"Basic Queue Configuration"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"# Single queue consumer\nqueue main rabbitmq amqp://guest:guest@localhost:5672 tasks\n"})}),"\n",(0,r.jsx)(n.h3,{id:"multiple-queue-consumers",children:"Multiple Queue Consumers"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"# High-priority tasks with no retry\nqueue priority sqs https://sqs.us-east-1.amazonaws.com/123/priority priority-queue retry_limit=0\n\n# Standard tasks with custom retry\nqueue standard sqs https://sqs.us-east-1.amazonaws.com/123/standard standard-queue retry_limit=5,retry_delay=30s\n\n# Batch processing queue\nqueue batch rabbitmq amqp://localhost:5672 batch-tasks retry_limit=10,retry_delay=1m\n"})}),"\n",(0,r.jsx)(n.h3,{id:"mixed-configuration",children:"Mixed Configuration"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"# Cron tasks\n0 8 * * * openai daily_summary file-/var/log/summary.log\n0 */4 * * * claude system_check console\n\n# Queue consumers\nqueue realtime rabbitmq amqp://localhost:5672 realtime-tasks retry_delay=1s\nqueue batch servicebus Endpoint=sb://namespace.servicebus.windows.net/ batch-topic\n"})}),"\n",(0,r.jsx)(n.h2,{id:"security-considerations",children:"Security Considerations"}),"\n",(0,r.jsx)(n.p,{children:"When implementing queue consumers:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Connection Security"}),": Use encrypted connections (AMQPS, HTTPS) in production"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Authentication"}),": Use strong authentication for queue services"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Message Validation"}),": All messages are validated before processing"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Secret Management"}),": Never include API keys or secrets in messages"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Access Control"}),": Limit queue access to authorized services only"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Concurrent Consumers"}),": Each queue consumer runs in its own goroutine"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Message Batching"}),": Future providers may support batch message processing"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Connection Pooling"}),": Providers should implement connection pooling"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Resource Limits"}),": Configure appropriate retry limits to prevent resource exhaustion"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"monitoring-and-observability",children:"Monitoring and Observability"}),"\n",(0,r.jsx)(n.p,{children:"The queue system includes comprehensive logging:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Consumer lifecycle events (start, stop, connect, disconnect)"}),"\n",(0,r.jsx)(n.li,{children:"Message processing (received, processed, acknowledged, rejected)"}),"\n",(0,r.jsx)(n.li,{children:"Error conditions with context"}),"\n",(0,r.jsx)(n.li,{children:"Performance metrics (processing duration)"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"future-enhancements",children:"Future Enhancements"}),"\n",(0,r.jsx)(n.p,{children:"Planned improvements for the queue system:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Provider Implementations"}),": RabbitMQ, AWS SQS, Azure Service Bus, Google Pub/Sub"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Dead Letter Queues"}),": Automatic handling of permanently failed messages"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Message Batching"}),": Process multiple messages in a single AI call"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Priority Queues"}),": Support for message priorities"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Metrics Export"}),": Prometheus/OpenTelemetry integration"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Circuit Breakers"}),": Automatic failure detection and recovery"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Message Encryption"}),": End-to-end encryption for sensitive prompts"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,r.jsx)(n.h3,{id:"common-issues",children:"Common Issues"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Connection Failed"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Verify connection string format"}),"\n",(0,r.jsx)(n.li,{children:"Check network connectivity"}),"\n",(0,r.jsx)(n.li,{children:"Confirm authentication credentials"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Message Rejected"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Check message format (JSON syntax)"}),"\n",(0,r.jsx)(n.li,{children:"Verify required fields are present"}),"\n",(0,r.jsx)(n.li,{children:"Ensure the model and processor are valid"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"High Retry Rate"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Check API key validity"}),"\n",(0,r.jsx)(n.li,{children:"Monitor API rate limits"}),"\n",(0,r.jsx)(n.li,{children:"Review error logs for specific failures"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"debug-logging",children:"Debug Logging"}),"\n",(0,r.jsx)(n.p,{children:"Enable debug logging for detailed queue operation information:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"LOG_LEVEL=debug cronai start\n"})}),"\n",(0,r.jsx)(n.h2,{id:"api-reference",children:"API Reference"}),"\n",(0,r.jsx)(n.h3,{id:"consumer-interface",children:"Consumer Interface"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"type Consumer interface {\n    Connect(ctx context.Context) error\n    Disconnect(ctx context.Context) error\n    Consume(ctx context.Context) (<-chan *Message, <-chan error)\n    Acknowledge(ctx context.Context, message *Message) error\n    Reject(ctx context.Context, message *Message, requeue bool) error\n    Name() string\n    Validate() error\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"message-structure",children:"Message Structure"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"type Message struct {\n    ID          string\n    Body        []byte\n    Attributes  map[string]string\n    ReceivedAt  time.Time\n    RetryCount  int\n    QueueSource string\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"task-message",children:"Task Message"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"type TaskMessage struct {\n    Model     string\n    Prompt    string\n    Processor string\n    Variables map[string]string\n    IsInline  bool\n}\n"})})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);